// <auto-generated />
using System;
using System.Net;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectIndustries.Sellify.Infra;

namespace ProjectIndustries.Sellify.Infra.Migrations
{
    [DbContext(typeof(SellifyDbContext))]
    partial class SellifyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.HasSequence("category_hi_lo_sequence", "public")
                .IncrementsBy(10);

            modelBuilder.HasSequence("customer_hi_lo_sequence", "public")
                .IncrementsBy(10);

            modelBuilder.HasSequence("product_hi_lo_sequence", "public")
                .IncrementsBy(10);

            modelBuilder.HasSequence("published_web_hook_hi_lo_sequence", "public")
                .IncrementsBy(10);

            modelBuilder.HasSequence("web_hook_binding_hi_lo_sequence", "public")
                .IncrementsBy(10);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("user_code");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("device_code");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("subject_id");

                    b.HasKey("UserCode")
                        .HasName("pk_device_codes");

                    b.HasIndex("DeviceCode")
                        .IsUnique()
                        .HasDatabaseName("ix_device_codes_device_code");

                    b.HasIndex("Expiration")
                        .HasDatabaseName("ix_device_codes_expiration");

                    b.ToTable("device_codes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("key");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("consumed_time");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("subject_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Key")
                        .HasName("pk_persisted_grants");

                    b.HasIndex("Expiration")
                        .HasDatabaseName("ix_persisted_grants_expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type")
                        .HasDatabaseName("ix_persisted_grants_subject_id_client_id_type");

                    b.HasIndex("SubjectId", "SessionId", "Type")
                        .HasDatabaseName("ix_persisted_grants_subject_id_session_id_type");

                    b.ToTable("persisted_grants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("asp_net_role_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("asp_net_user_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("asp_net_user_logins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("asp_net_user_roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("role_name_index");

                    b.ToTable("asp_net_roles");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("Picture")
                        .HasColumnType("text")
                        .HasColumnName("picture");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("user_name_index");

                    b.ToTable("asp_net_users");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.Analytics.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<IPAddress>("IpAddress")
                        .HasColumnType("inet")
                        .HasColumnName("ip_address");

                    b.Property<Instant>("LastActivityAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_activity_at");

                    b.Property<Instant>("StartedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("started_at");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid")
                        .HasColumnName("store_id");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_session");

                    b.HasIndex("StoreId")
                        .HasDatabaseName("ix_user_session_store_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_session_user_id");

                    b.ToTable("user_session", "public");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.Audit.ChangeSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<Instant>("Timestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("timestamp");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_change_set");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_change_set_updated_by");

                    b.ToTable("change_set", "audit");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.Customers.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseHiLo("customer_hi_lo_sequence", "public");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<Instant>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid")
                        .HasColumnName("store_id");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_customer");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_customer_created_by");

                    b.HasIndex("RemovedAt")
                        .HasDatabaseName("ix_customer_removed_at");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_customer_updated_by");

                    b.HasIndex("StoreId", "Email")
                        .IsUnique()
                        .HasDatabaseName("ix_customer_store_id_email");

                    b.ToTable("customer", "public");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<string>("ExternalTxId")
                        .HasColumnType("text")
                        .HasColumnName("external_tx_id");

                    b.Property<string>("InvoiceEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("invoice_email");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<Instant?>("PaidAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("paid_at");

                    b.Property<Instant>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid")
                        .HasColumnName("store_id");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_order");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_order_created_by");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_order_customer_id");

                    b.HasIndex("RemovedAt")
                        .HasDatabaseName("ix_order_removed_at");

                    b.HasIndex("StoreId")
                        .HasDatabaseName("ix_order_store_id");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_order_updated_by");

                    b.ToTable("order", "public");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.Products.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseHiLo("category_hi_lo_sequence", "public");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("ParentCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_category_id");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<Instant>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid")
                        .HasColumnName("store_id");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_category");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_category_created_by");

                    b.HasIndex("ParentCategoryId")
                        .HasDatabaseName("ix_category_parent_category_id");

                    b.HasIndex("RemovedAt")
                        .HasDatabaseName("ix_category_removed_at");

                    b.HasIndex("StoreId")
                        .HasDatabaseName("ix_category_store_id");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_category_updated_by");

                    b.ToTable("category", "public");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.Products.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseHiLo("product_hi_lo_sequence", "public");

                    b.Property<string>("Attributes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("attributes");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Excerpt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("excerpt");

                    b.Property<string>("Picture")
                        .HasColumnType("text")
                        .HasColumnName("picture");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Instant>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sku");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("stock");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid")
                        .HasColumnName("store_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_product");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_product_category_id");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_product_created_by");

                    b.HasIndex("RemovedAt")
                        .HasDatabaseName("ix_product_removed_at");

                    b.HasIndex("StoreId")
                        .HasDatabaseName("ix_product_store_id");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_product_updated_by");

                    b.ToTable("product", "public");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.Stores.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.Property<Instant>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_store");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_store_created_by");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_store_owner_id");

                    b.HasIndex("RemovedAt")
                        .HasDatabaseName("ix_store_removed_at");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_store_updated_by");

                    b.ToTable("store", "public");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.WebHooks.PublishedWebHook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseHiLo("published_web_hook_hi_lo_sequence", "public");

                    b.Property<string>("ListenerEndpoint")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("listener_endpoint");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("text")
                        .HasColumnName("status_description");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid")
                        .HasColumnName("store_id");

                    b.Property<Instant>("Timestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_published_web_hook");

                    b.HasIndex("StoreId")
                        .HasDatabaseName("ix_published_web_hook_store_id");

                    b.ToTable("published_web_hook", "public");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.WebHooks.WebHookBinding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseHiLo("web_hook_binding_hi_lo_sequence", "public");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_type");

                    b.Property<string>("ListenerEndpoint")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("listener_endpoint");

                    b.Property<int>("ReceiverType")
                        .HasColumnType("integer")
                        .HasColumnName("receiver_type");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid")
                        .HasColumnName("store_id");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_web_hook_binding");

                    b.HasIndex("StoreId")
                        .HasDatabaseName("ix_web_hook_binding_store_id");

                    b.ToTable("web_hook_binding", "public");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.WebHooks.WebHooksConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_secret");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid")
                        .HasColumnName("store_id");

                    b.HasKey("Id")
                        .HasName("pk_web_hooks_config");

                    b.HasIndex("StoreId")
                        .HasDatabaseName("ix_web_hooks_config_store_id");

                    b.ToTable("web_hooks_config", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.Analytics.UserSession", b =>
                {
                    b.HasOne("ProjectIndustries.Sellify.Core.Stores.Store", null)
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .HasConstraintName("fk_user_session_store_store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_session_asp_net_users_user_id");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.Audit.ChangeSet", b =>
                {
                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_change_set_asp_net_users_updated_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("ProjectIndustries.Sellify.Core.Audit.ChangeSetEntry", "Entries", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("ChangeSetId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ChangeType")
                                .HasColumnType("integer")
                                .HasColumnName("change_type");

                            b1.Property<Instant>("CreatedAt")
                                .HasColumnType("timestamp")
                                .HasColumnName("created_at");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("text")
                                .HasColumnName("created_by");

                            b1.Property<string>("EntityId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("entity_id");

                            b1.Property<string>("EntityType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("entity_type");

                            b1.Property<string>("Payload")
                                .IsRequired()
                                .HasColumnType("jsonb")
                                .HasColumnName("payload");

                            b1.Property<Instant>("UpdatedAt")
                                .HasColumnType("timestamp")
                                .HasColumnName("updated_at");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("text")
                                .HasColumnName("updated_by");

                            b1.HasKey("Id")
                                .HasName("pk_change_set_entry");

                            b1.HasIndex("ChangeSetId")
                                .HasDatabaseName("ix_change_set_entry_change_set_id");

                            b1.ToTable("change_set_entry", "audit");

                            b1.WithOwner()
                                .HasForeignKey("ChangeSetId")
                                .HasConstraintName("fk_change_set_entry_change_set_change_set_id");
                        });

                    b.Navigation("Entries");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.Customers.Customer", b =>
                {
                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_customer_asp_net_users_created_by");

                    b.HasOne("ProjectIndustries.Sellify.Core.Stores.Store", null)
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .HasConstraintName("fk_customer_store_store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_customer_asp_net_users_updated_by");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.Orders.Order", b =>
                {
                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_order_asp_net_users_created_by");

                    b.HasOne("ProjectIndustries.Sellify.Core.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_order_customer_customer_id");

                    b.HasOne("ProjectIndustries.Sellify.Core.Stores.Store", null)
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .HasConstraintName("fk_order_store_store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_order_asp_net_users_updated_by");

                    b.OwnsOne("ProjectIndustries.Sellify.Core.Orders.PurchasedProduct", "Product", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<long>("Id")
                                .HasColumnType("bigint")
                                .HasColumnName("product_id");

                            b1.Property<string>("Picture")
                                .HasColumnType("text")
                                .HasColumnName("product_picture");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("product_price");

                            b1.Property<long>("Quantity")
                                .HasColumnType("bigint")
                                .HasColumnName("product_quantity");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("product_title");

                            b1.HasKey("OrderId")
                                .HasName("pk_order");

                            b1.HasIndex("Id")
                                .HasDatabaseName("ix_order_product_id");

                            b1.ToTable("order", "public");

                            b1.HasOne("ProjectIndustries.Sellify.Core.Products.Product", null)
                                .WithMany()
                                .HasForeignKey("Id")
                                .HasConstraintName("fk_order_product_product_id")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_order_order_order_id");
                        });

                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.Products.Category", b =>
                {
                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_category_asp_net_users_created_by");

                    b.HasOne("ProjectIndustries.Sellify.Core.Products.Category", null)
                        .WithMany()
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("fk_category_category_parent_category_id");

                    b.HasOne("ProjectIndustries.Sellify.Core.Stores.Store", null)
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .HasConstraintName("fk_category_store_store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_category_asp_net_users_updated_by");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.Products.Product", b =>
                {
                    b.HasOne("ProjectIndustries.Sellify.Core.Products.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_product_category_category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_product_asp_net_users_created_by");

                    b.HasOne("ProjectIndustries.Sellify.Core.Stores.Store", null)
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .HasConstraintName("fk_product_store_store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_product_asp_net_users_updated_by");
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.Stores.Store", b =>
                {
                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_store_asp_net_users_created_by");

                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_store_asp_net_users_owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIndustries.Sellify.App.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_store_asp_net_users_updated_by");

                    b.OwnsOne("ProjectIndustries.Sellify.Core.Stores.HostingConfig", "HostingConfig", b1 =>
                        {
                            b1.Property<Guid>("StoreId")
                                .HasColumnType("uuid");

                            b1.Property<string>("DomainName")
                                .HasColumnType("text")
                                .HasColumnName("domain_name");

                            b1.Property<int>("Mode")
                                .HasColumnType("integer")
                                .HasColumnName("mode");

                            b1.HasKey("StoreId")
                                .HasName("pk_store");

                            b1.ToTable("store", "public");

                            b1.WithOwner()
                                .HasForeignKey("StoreId")
                                .HasConstraintName("fk_store_store_store_id");
                        });

                    b.OwnsOne("ProjectIndustries.Sellify.Core.Stores.PaymentGatewayIntegrationConfigs", "PaymentGatewayConfigs", b1 =>
                        {
                            b1.Property<Guid>("StoreId")
                                .HasColumnType("uuid");

                            b1.HasKey("StoreId")
                                .HasName("pk_store");

                            b1.ToTable("store", "public");

                            b1.WithOwner()
                                .HasForeignKey("StoreId")
                                .HasConstraintName("fk_store_store_store_id");

                            b1.OwnsOne("ProjectIndustries.Sellify.Core.Stores.PayPalIntegrationConfig", "PayPal", b2 =>
                                {
                                    b2.Property<Guid>("PaymentGatewayIntegrationConfigsStoreId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("AcceptCreditCards")
                                        .HasColumnType("boolean")
                                        .HasColumnName("accept_credit_cards");

                                    b2.Property<string>("Email")
                                        .HasColumnType("text")
                                        .HasColumnName("email");

                                    b2.Property<string>("WebhookId")
                                        .HasColumnType("text")
                                        .HasColumnName("webhook_id");

                                    b2.HasKey("PaymentGatewayIntegrationConfigsStoreId")
                                        .HasName("pk_store");

                                    b2.ToTable("store", "public");

                                    b2.WithOwner()
                                        .HasForeignKey("PaymentGatewayIntegrationConfigsStoreId")
                                        .HasConstraintName("fk_store_store_payment_gateway_integration_configs_store_id");
                                });

                            b1.OwnsOne("ProjectIndustries.Sellify.Core.Stores.SkrillIntegrationConfig", "Skrill", b2 =>
                                {
                                    b2.Property<Guid>("PaymentGatewayIntegrationConfigsStoreId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Email")
                                        .HasColumnType("text")
                                        .HasColumnName("skrill_email");

                                    b2.Property<string>("Secret")
                                        .HasColumnType("text")
                                        .HasColumnName("skrill_secret");

                                    b2.HasKey("PaymentGatewayIntegrationConfigsStoreId")
                                        .HasName("pk_store");

                                    b2.ToTable("store", "public");

                                    b2.WithOwner()
                                        .HasForeignKey("PaymentGatewayIntegrationConfigsStoreId")
                                        .HasConstraintName("fk_store_store_payment_gateway_integration_configs_store_id");
                                });

                            b1.OwnsOne("ProjectIndustries.Sellify.Core.Stores.StripeIntegrationConfig", "Stripe", b2 =>
                                {
                                    b2.Property<Guid>("PaymentGatewayIntegrationConfigsStoreId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("ApiKey")
                                        .HasColumnType("text")
                                        .HasColumnName("payment_gateway_configs_stripe_api_key");

                                    b2.Property<string>("WebhookSecret")
                                        .HasColumnType("text")
                                        .HasColumnName("payment_gateway_configs_stripe_webhook_secret");

                                    b2.HasKey("PaymentGatewayIntegrationConfigsStoreId")
                                        .HasName("pk_store");

                                    b2.ToTable("store", "public");

                                    b2.WithOwner()
                                        .HasForeignKey("PaymentGatewayIntegrationConfigsStoreId")
                                        .HasConstraintName("fk_store_store_payment_gateway_integration_configs_store_id");
                                });

                            b1.Navigation("PayPal")
                                .IsRequired();

                            b1.Navigation("Skrill")
                                .IsRequired();

                            b1.Navigation("Stripe")
                                .IsRequired();
                        });

                    b.Navigation("HostingConfig")
                        .IsRequired();

                    b.Navigation("PaymentGatewayConfigs")
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.WebHooks.PublishedWebHook", b =>
                {
                    b.HasOne("ProjectIndustries.Sellify.Core.Stores.Store", null)
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .HasConstraintName("fk_published_web_hook_store_store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.WebHooks.WebHookBinding", b =>
                {
                    b.HasOne("ProjectIndustries.Sellify.Core.Stores.Store", null)
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .HasConstraintName("fk_web_hook_binding_store_store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectIndustries.Sellify.Core.WebHooks.WebHooksConfig", b =>
                {
                    b.HasOne("ProjectIndustries.Sellify.Core.Stores.Store", null)
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .HasConstraintName("fk_web_hooks_config_store_store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
